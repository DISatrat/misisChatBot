package org.example.misischatbot;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.example.misischatbot.model.Mailing;
import org.example.misischatbot.model.UserStats;
import org.example.misischatbot.service.MailingService;
import org.example.misischatbot.service.VkUsrService;
import org.springframework.stereotype.Component;
import ru.mail.im.botapi.BotApiClient;
import ru.mail.im.botapi.BotApiClientController;
import ru.mail.im.botapi.api.entity.SendTextRequest;
import ru.mail.im.botapi.fetcher.event.CallbackQueryEvent;
import ru.mail.im.botapi.fetcher.event.Event;
import ru.mail.im.botapi.fetcher.event.NewMessageEvent;
import ru.mail.im.botapi.response.MessageResponse;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
@RequiredArgsConstructor
public class Handler {
    private final BotApiClient client;
    private final BotApiClientController controller;

    private final String adminUserId = System.getenv("ADMIN_USER_ID");
    private final MailingService mailingService;
    private final VkUsrService vkUsrService;

    @PostConstruct
    public void init() {
        client.addOnEventFetchListener(events -> {
            for (Event event : events) {
                switch (event.getType()) {
                    case "newMessage":
                        handleMessage((NewMessageEvent) event);
                        break;
                    case "callbackQuery":
                        handleMessageCallback((CallbackQueryEvent) event);

                        break;
                }
            }
        });
    }

    @PostConstruct
    public void init1() {
        client.addOnEventFetchListener(events -> {
            for (Event<?> event : events) {
                System.out.println("--- –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ---");
                System.out.println("–¢–∏–ø: " + event.getType());
                System.out.println("–î–∞–Ω–Ω—ã–µ: " + event.getEventId());
                System.out.println("---------------------");
            }
        });
    }

    private void handleMessage(NewMessageEvent event) {
        String text = event.getText();
        String senderId = event.getFrom().getUserId();
        String chatId = event.getChat().getChatId();

        vkUsrService.addNewUsr(senderId);

        if (!adminUserId.equals(senderId)) {
            return;
        }

        try {
            if (text.startsWith("/create")) {
                handleCreateCommand(chatId, text);
            } else if (text.startsWith("/get")) {
                handleGetCommand(chatId, text);
            } else if (text.startsWith("/delete")) {
                handleDeleteCommand(chatId, text);
            } else if (text.startsWith("/stat")) {
                handleStatCommand(chatId, text);
            } else {
                sendHelp(chatId);
            }
        } catch (Exception e) {
            sendText(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void handleCreateCommand(String chatId, String text) {
        Pattern pattern = Pattern.compile("^/(create)\\s+(once|repeat)\\s+([^\\s]+)\\s+(.*?)(?:\\s*\\{(.*)\\})?$");
        Matcher matcher = pattern.matcher(text);

        if (!matcher.find()) {
            sendText(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n" +
                    "/create once <–¥–∞—Ç–∞_–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> {user1,user2,...}\n" +
                    "/create repeat <cron_–≤—ã—Ä–∞–∂–µ–Ω–∏–µ> <—Ç–µ–∫—Å—Ç> {user1,user2,...}\n" +
                    "–ü—Ä–∏–º–µ—Ä—ã:\n" +
                    "/create once 2025-04-21T17:55:00 –ù–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ {user123,user456}\n" +
                    "/create repeat \"0 0 9 * * *\" –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
            return;
        }

        Mailing mailing = new Mailing();
        mailing.setText(matcher.group(4));

        if ("once".equalsIgnoreCase(matcher.group(2))) {
            mailing.setType(Mailing.MailingType.ONCE);
            try {
                mailing.setSendTime(LocalDateTime.parse(matcher.group(3), DateTimeFormatter.ISO_LOCAL_DATE_TIME));
            } catch (DateTimeParseException e) {
                sendText(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ yyyy-MM-ddTHH:mm:ss");
                return;
            }
        } else {
            mailing.setType(Mailing.MailingType.REPEATING);
            mailing.setCronExpression(matcher.group(3));
        }

        if (matcher.group(5) != null) {
            Arrays.stream(matcher.group(5).split(","))
                    .map(String::trim)
                    .filter(id -> !id.isEmpty())
                    .forEach(userId -> mailing.getUserStats().put(userId,
                            new UserStats(false, false, null, null, 0)));
        }

        mailingService.create(mailing);
        sendText(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: " + mailing.getId());
    }

    private void handleGetCommand(String chatId, String text) {
        String[] parts = text.split(" ");
        if (parts.length == 1) {
            List<Mailing> mailings = mailingService.getAll();
            if (mailings.isEmpty()) {
                sendText(chatId, "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫");
                return;
            }

            StringBuilder response = new StringBuilder("–í—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n");
            mailings.forEach(m -> response.append(formatMailingShort(m)).append("\n"));
            sendText(chatId, response.toString());
        } else {
            try {
                Long id = Long.parseLong(parts[1]);
                mailingService.getById(id).ifPresentOrElse(
                        mailing -> sendText(chatId, formatMailingFull(mailing)),
                        () -> sendText(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                );
            } catch (NumberFormatException e) {
                sendText(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID");
            }
        }
    }

    private void handleDeleteCommand(String chatId, String text) {
        String[] parts = text.split(" ");
        if (parts.length != 2) {
            sendText(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <ID_—Ä–∞—Å—Å—ã–ª–∫–∏>");
            return;
        }

        try {
            Long id = Long.parseLong(parts[1]);
            mailingService.delete(id);
            sendText(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ —Å ID " + id + " —É–¥–∞–ª–µ–Ω–∞");
        } catch (NumberFormatException e) {
            sendText(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID");
        }
    }


    private void handleStatCommand(String chatId, String text) {
        String[] parts = text.split(" ");
        if (parts.length == 1) {
            sendText(chatId, mailingService.getAllStatistics());
        } else {
            try {
                Long id = Long.parseLong(parts[1]);
                sendText(chatId, mailingService.getStatistics(id));
            } catch (NumberFormatException e) {
                sendText(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID");
            }
        }
    }

    private String formatMailingStats(Mailing mailing) {
        int total = mailing.getUserStats().size();
        long sent = mailing.getUserStats().values().stream().filter(UserStats::isSent).count();
        long read = mailing.getUserStats().values().stream().filter(UserStats::isRead).count();

        return String.format(
                "üìå –†–∞—Å—Å—ã–ª–∫–∞ #%d\n" +
                        "üìÖ %s\n" +
                        "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d/%d (%.1f%%)\n" +
                        "‚úì –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: %d (%.1f%%)\n" +
                        "üëÅÔ∏è –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: %d (%.1f%%)",
                mailing.getId(),
                mailing.getType() == Mailing.MailingType.ONCE ?
                        "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è: " + mailing.getSendTime().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")) :
                        "–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è: " + mailing.getCronExpression(),
                sent, total, (sent * 100.0 / total),
                read, (read * 100.0 / total)
        );
    }

    private String formatDetailedStats(Mailing mailing) {
        StringBuilder sb = new StringBuilder();
        sb.append(formatMailingStats(mailing));

        sb.append("\n\nüë§ –î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n");

        mailing.getUserStats().forEach((userId, stats) -> {
            sb.append(String.format(
                    "\nüîπ %s: %s%s%s",
                    userId,
                    stats.isSent() ? "‚úì –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" : "√ó –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    stats.isRead() ? ", üëÅÔ∏è –ø—Ä–æ—á–∏—Ç–∞–Ω–æ" : ""
            ));

            if (stats.isRead() && stats.getReadTime() != null) {
                sb.append(" –≤ ").append(stats.getReadTime().format(DateTimeFormatter.ofPattern("HH:mm dd.MM.yyyy")));
            }
        });

        return sb.toString();
    }

    private String formatMailingShort(Mailing mailing) {
        return String.format("#%d: %s (%s)",
                mailing.getId(),
                mailing.getText(),
                mailing.getType() == Mailing.MailingType.ONCE ?
                        "–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è" : "–ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è");
    }

    private String formatMailingFull(Mailing mailing) {
        return String.format(
                "–†–∞—Å—Å—ã–ª–∫–∞ #%d\n–¢–∏–ø: %s\n–¢–µ–∫—Å—Ç: %s\n" +
                        "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: %s\n" +
                        (mailing.getType() == Mailing.MailingType.ONCE ?
                                "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: %s" : "Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: %s"),
                mailing.getId(),
                mailing.getType() == Mailing.MailingType.ONCE ? "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è" : "–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è",
                mailing.getText(),
                mailing.getCreateDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")),
                mailing.getType() == Mailing.MailingType.ONCE ?
                        mailing.getSendTime().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")) :
                        mailing.getCronExpression()
        );
    }

    private void sendHelp(String chatId) {
        sendText(chatId,
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                        "/create <once/repeat> [–¥–∞—Ç–∞/cron] <—Ç–µ–∫—Å—Ç> {usrId1,usrId2,...}- —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n" +
                        "/get [id] - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ(–∞—Ö)\n" +
                        "/delete <id> - —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n" +
                        "/stat [id] - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n" +
                        "\n–ü—Ä–∏–º–µ—Ä—ã:\n" +
                        "/create once 2023-12-31 23:59 –ù–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ\n" +
                        "/create repeat \"0 0 9 * * *\" –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n" +
                        "/get\n/delete 1\n/stat 1");
    }

    private long sendText(String chatId, String text) {
        try {
            MessageResponse response = controller.sendTextMessage(
                    new SendTextRequest()
                            .setChatId(chatId)
                            .setText(text)
            );

            return response.getMsgId();
        } catch (IOException e) {
            e.printStackTrace();
            return -1;
        }
    }

    private void handleMessageCallback(CallbackQueryEvent event) {
        mailingService.readMessage(event.getFrom().getUserId());
    }

}
